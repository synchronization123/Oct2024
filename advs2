<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JIRA ID Utility</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        textarea {
            width: 100%;
            height: 200px;
        }
        .exception {
            color: red;
        }
    </style>
</head>
<body>
    <h1>JIRA ID Utility</h1>
    <input type="file" id="fileInput" accept=".txt, .xls, .xlsx">
    <button id="fetchButton">Fetch JIRA IDs</button>
    <button id="exportButton">Export JIRA IDs</button>
    <h2>Fetched JIRA IDs</h2>
    <textarea id="output" readonly></textarea>
    <h2>Exceptions</h2>
    <div id="exceptions"></div>

    <script>
        let projectKeys = [];
        let fetchedJiraIds = [];
        let inputFileName = '';

        // Fetch project keys from the intermediary fetch.php file
        async function fetchProjectKeys() {
            try {
                const response = await fetch("fetch.php");
                const data = await response.json();

                if (data.error) {
                    console.error("Error fetching project keys:", data.error);
                    return;
                }

                projectKeys = data.map(project => project.key); // Extract keys
            } catch (error) {
                console.error("Error fetching project keys:", error);
            }
        }

        // Import .txt or .xls/.xlsx file and parse JIRA IDs
        document.getElementById("fileInput").addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (!file) {
                alert("Please select a file.");
                return;
            }

            inputFileName = file.name.split('.').slice(0, -1).join('.'); // Remove extension from filename

            if (file.name.endsWith('.txt')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const content = e.target.result;
                    processFileContent(content.split('\n'));
                };
                reader.readAsText(file);
            } else if (file.name.endsWith('.xls') || file.name.endsWith('.xlsx')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const sheetName = workbook.SheetNames[0];
                    const sheet = workbook.Sheets[sheetName];
                    const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });
                    processFileContent(rows.map(row => row[0])); // Assume JIRA IDs in first column
                };
                reader.readAsArrayBuffer(file);
            } else {
                alert("Please upload a .txt, .xls or .xlsx file.");
            }
        });

        // Process file content and match JIRA IDs
        function processFileContent(lines) {
            const exceptions = [];
            fetchedJiraIds = [];

            for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {
                const line = (lines[lineNumber] || '').trim();
                const matchedKeys = projectKeys.filter(key => line === `${key}-`);
                const partialMatches = projectKeys.filter(key => line.includes(key.slice(0, 2))); // Check for substring

                if (matchedKeys.length > 0) {
                    fetchedJiraIds.push(...matchedKeys);
                }
                if (partialMatches.length > 0) {
                    exceptions.push({
                        line: lineNumber + 1,
                        text: line,
                        matched: partialMatches
                    });
                }
            }

            updateOutput();
            displayExceptions(exceptions);
        }

        // Update the output textarea
        function updateOutput() {
            const uniqueIds = [...new Set(fetchedJiraIds)];
            document.getElementById("output").value = uniqueIds.join(',');
        }

        // Display exceptions
        function displayExceptions(exceptions) {
            const exceptionsDiv = document.getElementById("exceptions");
            exceptionsDiv.innerHTML = ''; // Clear previous exceptions
            exceptions.forEach(exception => {
                const span = document.createElement('span');
                span.className = "exception";
                span.innerHTML = `Line ${exception.line}: ${highlightMatches(exception.text, exception.matched)}<br>`;
                exceptionsDiv.appendChild(span);
            });
        }

        // Highlight matching letters
        function highlightMatches(line, matches) {
            matches.forEach(match => {
                line = line.replace(new RegExp(`(${match.slice(0, 2)})`, 'gi'), `<b style="color:red;">$1</b>`);
            });
            return line;
        }

        // Export unique JIRA IDs to Excel
        document.getElementById("exportButton").addEventListener("click", () => {
            const uniqueIds = [...new Set(fetchedJiraIds)];
            const worksheet = XLSX.utils.aoa_to_sheet([["JIRA IDs"], ...uniqueIds.map(id => [id])]);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "JIRA IDs");

            const exportFileName = `${inputFileName}.xlsx`;
            XLSX.writeFile(workbook, exportFileName);
        });

        // Fetch project keys on load
        fetchProjectKeys();
    </script>
</body>
</html>