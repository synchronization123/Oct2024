<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DefectDojo Test Findings Report</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-color: #f8f9fa;
        }
        .container {
            margin-top: 30px;
        }
        .section-title {
            font-size: 1.5em;
            color: #343a40;
            margin-bottom: 20px;
        }
        .finding-detail {
            background-color: #ffffff;
            border: 1px solid #dee2e6;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
        .proof-image {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 10px auto;
            border: 1px solid #dee2e6;
            border-radius: 5px;
        }
        .table-bordered th, .table-bordered td {
            vertical-align: top;
        }
    </style>
</head>
<body>

<div class="container">
    <h2 class="text-center mb-4">DefectDojo Test Findings Report</h2>

    <!-- Test ID Input -->
    <div class="mb-4">
        <label for="testId" class="form-label">Enter Test ID</label>
        <input type="text" class="form-control" id="testId" placeholder="Enter test ID">
        <button class="btn btn-primary mt-3" onclick="fetchFindings()">Fetch Findings</button>
    </div>

    <!-- Findings Display Area -->
    <div id="findingsDisplay" class="d-none">
        <h3 class="section-title">Findings Report</h3>
        <div id="findingsContent"></div>
    </div>
</div>

<script>
// API configuration
const API_BASE_URL = "https://demo.defectdojo.org/api/v2";  // Replace with your actual base URL
const API_TOKEN = "YOUR_API_TOKEN";  // Replace with your actual API token

// Fetch findings associated with a specific Test ID
async function fetchFindings() {
    const testId = document.getElementById("testId").value;
    if (!testId) {
        alert("Please enter a Test ID");
        return;
    }

    try {
        const response = await fetch(`${API_BASE_URL}/findings/?test=${testId}`, {
            headers: {
                "Authorization": `Token ${API_TOKEN}`
            }
        });
        const findingData = await response.json();

        displayFindings(findingData.results);
    } catch (error) {
        console.error("Error fetching findings:", error);
        alert("An error occurred while fetching findings.");
    }
}

// Display findings
function displayFindings(findings) {
    const findingsDisplay = document.getElementById("findingsDisplay");
    const findingsContent = document.getElementById("findingsContent");

    findingsContent.innerHTML = "";  // Clear previous findings

    findings.forEach(finding => {
        // Severity and other key details in table format
        const table = `
            <table class="table table-bordered mt-3">
                <tbody>
                    <tr><th>Severity</th><td>${finding.severity || "N/A"}</td></tr>
                    <tr><th>CVSSv3 Score</th><td>${finding.cvssv3_score || "N/A"}</td></tr>
                    <tr><th>CVSSv3</th><td>${finding.cvssv3 || "N/A"}</td></tr>
                    <tr><th>Reporter</th><td>${finding.reporter || "N/A"}</td></tr>
                    <tr><th>Vulnerability IDs</th><td>${finding.vulnerability_ids || "N/A"}</td></tr>
                </tbody>
            </table>
        `;

        // Detailed sections for description, mitigation, etc.
        const detailSection = `
            <div class="finding-detail">
                <h5 class="text-dark">${finding.title || "Finding"}</h5>
                <p><strong>Description:</strong> ${finding.description || "N/A"}</p>
                <p><strong>Mitigation:</strong> ${finding.mitigation || "N/A"}</p>
                <p><strong>Impact:</strong> ${finding.impact || "N/A"}</p>
                <p><strong>Steps to Reproduce:</strong> ${finding.steps_to_reproduce || "N/A"}</p>
                ${getProofOfConceptImages(finding.steps_to_reproduce)}
            </div>
        `;

        findingsContent.innerHTML += table + detailSection;
    });

    findingsDisplay.classList.remove("d-none");
}

// Extract and display proof of concept images from URLs in steps to reproduce text
function getProofOfConceptImages(steps) {
    const proofLinkPattern = /https?:\/\/[^\s]+/g;
    const proofLinks = steps.match(proofLinkPattern);

    if (proofLinks) {
        return proofLinks.map(link => {
            // Remove unwanted trailing characters like ")" or "."
            const cleanedLink = link.replace(/[).,;:]+$/, "");
            return `<a href="${cleanedLink}" target="_blank"><img src="${cleanedLink}" alt="Proof of Concept" class="proof-image"></a>`;
        }).join("");
    }
    return "";
}
</script>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
</body>
</html>