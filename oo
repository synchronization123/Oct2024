<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JIRA Changelog Extractor</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <style>
        .substring-match {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>

<div class="container mt-5">
    <h2>JIRA Changelog Extractor</h2>
    <div class="form-group">
        <label for="fileInput">Import Changelog (.txt):</label>
        <input type="file" class="form-control-file" id="fileInput" accept=".txt">
    </div>
    <button class="btn btn-primary" id="startButton">Start</button>
    <button class="btn btn-secondary" id="exportButton">Export to Excel</button>

    <h4 class="mt-4">Output:</h4>
    <textarea id="output" class="form-control" rows="3" readonly></textarea>

    <h4 class="mt-4">Exceptions:</h4>
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="matching-tab" data-toggle="tab" href="#matching" role="tab" aria-controls="matching" aria-selected="true">Matching Strings</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="line-by-line-tab" data-toggle="tab" href="#line-by-line" role="tab" aria-controls="line-by-line" aria-selected="false">Line by Line Parsing</a>
        </li>
    </ul>
    <div class="tab-content mt-2" id="myTabContent">
        <div class="tab-pane fade show active" id="matching" role="tabpanel" aria-labelledby="matching-tab">
            <div id="matchingOutput" class="border p-3" style="min-height: 100px;"></div>
        </div>
        <div class="tab-pane fade" id="line-by-line" role="tabpanel" aria-labelledby="line-by-line-tab">
            <div id="lineByLineOutput" class="border p-3" style="min-height: 100px;"></div>
        </div>
    </div>
</div>

<script>
    const projectFilePath = 'projects.txt'; // Path for projects.txt in the same folder
    let projectKeys = [];
    let exceptions = []; // Store exceptions to display later
    let outputMatches = []; // Store valid JIRA IDs for export
    let matchingStrings = []; // Store lines with matching substrings for the Matching Strings tab

    // Fetch project keys from the projects.txt file
    fetch(projectFilePath)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(data => {
            projectKeys = data.split('\n').map(line => line.trim()).filter(line => line);
        })
        .catch(error => {
            console.error('Error fetching projects:', error);
            alert('Could not load project keys. Please ensure projects.txt is in the same directory as this HTML file.');
        });

    document.getElementById('startButton').addEventListener('click', () => {
        const fileInput = document.getElementById('fileInput');
        const output = document.getElementById('output');
        exceptions = []; // Reset exceptions
        outputMatches = []; // Reset output matches
        matchingStrings = []; // Reset matching strings

        if (fileInput.files.length === 0) {
            alert('Please import a changelog file.');
            return;
        }

        if (projectKeys.length === 0) {
            alert('Project keys are not loaded. Please check the projects.txt file path.');
            return;
        }

        const file = fileInput.files[0];
        const reader = new FileReader();

        reader.onload = function(e) {
            const changelogData = e.target.result.split('\n').map(line => line.trim());

            changelogData.forEach((line, index) => {
                // Match JIRA IDs in the format PROJECT-ID
                const matches = line.match(/\b(\w+-\d+)\b/g) || [];
                let foundMatchingSubstring = false; // Flag to track substring matches

                matches.forEach(match => {
                    const projectKey = match.split('-')[0] + '-';
                    if (projectKeys.includes(projectKey)) {
                        outputMatches.push(match); // Valid JIRA ID
                    } else {
                        // Check for substring matches
                        let highlightedLine = line;
                        projectKeys.forEach(key => {
                            // Create regex for matching key as a flexible substring (even within other words)
                            const regex = new RegExp(`(${key})`, 'gi');
                            if (regex.test(line)) {
                                foundMatchingSubstring = true; // Indicate that we found a substring match
                                // Highlight matching substrings in the line
                                highlightedLine = highlightedLine.replace(regex, `<span class="substring-match">$1</span>`);
                            }
                        });

                        // If substring match was found, push to matchingStrings
                        if (foundMatchingSubstring) {
                            matchingStrings.push(`Line ${index + 1}: ${highlightedLine}`);
                        }
                    }
                });

                // If no valid JIRA IDs, add it to exceptions
                if (!matches.length) {
                    exceptions.push(`Line ${index + 1}: ${line} (No JIRA IDs found)`);
                }
            });

            // Remove duplicates and format the output
            output.value = [...new Set(outputMatches)].join(', ');

            // Update matching strings tab
            updateMatchingOutput();
            // Update line-by-line exceptions tab
            updateLineByLineOutput();
        };

        reader.readAsText(file);
    });

    function updateMatchingOutput() {
        const matchingOutput = document.getElementById('matchingOutput');
        matchingOutput.innerHTML = matchingStrings.length > 0 ? matchingStrings.join('<br>') : 'No matching substrings found.';
    }

    function updateLineByLineOutput() {
        const lineByLineOutput = document.getElementById('lineByLineOutput');
        lineByLineOutput.innerHTML = exceptions.length > 0 ? exceptions.join('<br>') : 'No exceptions found.';
    }

    document.getElementById('exportButton').addEventListener('click', () => {
        if (outputMatches.length === 0) {
            alert('No valid JIRA IDs to export.');
            return;
        }

        // Remove duplicates for export
        const uniqueOutputMatches = [...new Set(outputMatches)];

        const fileInput = document.getElementById('fileInput');
        const inputFileName = fileInput.files[0].name.replace('.txt', '');
        const csvContent = "data:text/csv;charset=utf-8,JIRA ID\n" + uniqueOutputMatches.join('\n');
        const encodedUri = encodeURI(csvContent);
        
        const link = document.createElement('a');
        link.setAttribute('href', encodedUri);
        link.setAttribute('download', `${inputFileName}_jira_ids.csv`);
        document.body.appendChild(link); // Required for Firefox

        link.click();
        document.body.removeChild(link); // Remove the link after downloading
    });
</script>

</body>
</html>