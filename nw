<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jira Project Processor</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        #exception-btn.blink {
            animation: blink-animation 1s steps(5, start) infinite;
        }
        @keyframes blink-animation {
            50% {
                opacity: 0;
            }
        }
        .modal-content {
            max-height: 400px;
            overflow-y: scroll;
        }
    </style>
</head>
<body>
<div class="container mt-5">
    <h3>Jira Project Processor</h3>
    <div id="jira-status"></div>
    <input type="file" id="file-input" class="form-control mt-3">
    <button class="btn btn-primary mt-3" id="start-btn">Start Processing</button>
    <div id="alert" class="alert alert-danger mt-3" style="display: none;"></div>
    
    <div class="mt-3" id="results-section" style="display: none;">
        <p>Total JIRA IDs found: <span id="jira-count"></span></p>
        <textarea id="output-area" class="form-control" rows="5" readonly></textarea>
        <button id="copy-btn" class="btn btn-success mt-2">Copy to Clipboard</button>
        <button id="export-btn" class="btn btn-secondary mt-2" disabled>Export to Excel</button>
        <button id="projects-btn" class="btn btn-info mt-2" disabled>Show Projects</button>
        <button id="exception-btn" class="btn btn-warning mt-2 blink" disabled>Show Exceptions</button>
        <button id="logs-btn" class="btn btn-dark mt-2" disabled>Show Logs</button>
    </div>
</div>

<!-- Modals -->
<div class="modal fade" id="projectsModal" tabindex="-1" aria-labelledby="projectsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="projectsModalLabel">Projects</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <textarea id="projects-text" class="form-control" readonly rows="10"></textarea>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exceptionsModal" tabindex="-1" aria-labelledby="exceptionsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exceptionsModalLabel">Exceptions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <textarea id="exceptions-text" class="form-control" readonly rows="10"></textarea>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="logsModal" tabindex="-1" aria-labelledby="logsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="logsModalLabel">Logs</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <textarea id="logs-text" class="form-control" readonly rows="10"></textarea>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script>
    const jiraToken = 'dhndndndnd';  // Provisioned token for authentication
    let projectKeys = [];
    let exceptions = [];
    let logs = [];
    let jiraIDs = new Set();

    function checkJiraLogin() {
        fetch('https://jira.demo.almworks.com/rest/api/2/myself', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${jiraToken}`,  // Using Bearer token for authentication
                'Content-Type': 'application/json'
            },
            credentials: 'include',
        })
        .then(response => {
            if (response.status === 200) {
                document.getElementById("jira-status").innerHTML = '<span style="color:green;">Connected to Jira for projects</span>';
                fetchProjects();
            } else {
                document.getElementById("jira-status").innerHTML = '<span style="color:red;">Error connecting to Jira</span>';
            }
        })
        .catch(error => {
            document.getElementById("jira-status").innerHTML = '<span style="color:red;">Error connecting to Jira</span>';
            console.error('Error connecting to Jira:', error);
        });
    }

    function fetchProjects() {
        fetch('https://jira.demo.almworks.com/rest/api/2/project', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${jiraToken}`,
                'Content-Type': 'application/json'
            },
            credentials: 'include',
        })
        .then(response => response.json())
        .then(data => {
            projectKeys = data.map(project => project.key.toUpperCase() + '-');
            document.getElementById("projects-btn").disabled = false;
        })
        .catch(error => {
            console.error('Error fetching projects:', error);
        });
    }

    document.getElementById('start-btn').addEventListener('click', () => {
        const fileInput = document.getElementById('file-input');
        if (!fileInput.files.length) {
            showAlert('Please upload a changelog file.');
            return;
        }

        const file = fileInput.files[0];
        if (!file.name.endsWith('.txt')) {
            showAlert('Only .txt files are allowed.');
            return;
        }

        processChangelog(file);
    });

    function processChangelog(file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const content = e.target.result;
            const lines = content.split('\n');
            logs = [];
            exceptions = [];
            jiraIDs.clear();
            
            lines.forEach((line, index) => {
                logs.push(`Processing line ${index + 1}: ${line.trim()}`);
                const matches = line.match(/[A-Z]+-\d+/gi);
                
                if (matches) {
                    matches.forEach(match => {
                        const matchedProjectKey = projectKeys.find(key => line.toUpperCase().includes(key));
                        if (matchedProjectKey) {
                            jiraIDs.add(match);
                        } else {
                            exceptions.push(`Line ${index + 1}: ${line} (matches project key without hyphen)`);
                        }
                    });
                }
            });

            updateResults();
        };
        reader.readAsText(file);
    }

    function updateResults() {
        document.getElementById('jira-count').textContent = jiraIDs.size;
        document.getElementById('output-area').value = Array.from(jiraIDs).join(', ');
        document.getElementById('results-section').style.display = 'block';

        if (jiraIDs.size) {
            document.getElementById('export-btn').disabled = false;
            document.getElementById('exception-btn').disabled = false;
            document.getElementById('logs-btn').disabled = false;
        } else {
            document.getElementById('export-btn').disabled = true;
        }

        if (exceptions.length > 0) {
            document.getElementById('exception-btn').classList.add('blink');
        }
    }

    function showAlert(message) {
        const alert = document.getElementById('alert');
        alert.textContent = message;
        alert.style.display = 'block';
        setTimeout(() => alert.style.display = 'none', 5000);
    }

    document.getElementById('projects-btn').addEventListener('click', () => {
        const projectText = projectKeys.join(', ');
        document.getElementById('projects-text').value = projectText;
        new bootstrap.Modal(document.getElementById('projectsModal')).show();
    });

    document.getElementById('exception-btn').addEventListener('click', () => {
        document.getElementById('exceptions-text').value = exceptions.join('\n');
        new bootstrap.Modal(document.getElementById('exceptionsModal')).show();
        document.getElementById('exception-btn').classList.remove('blink');
    });

    document.getElementById('logs-btn').addEventListener('click', () => {
        document.getElementById('logs-text').value = logs.join('\n');
        new bootstrap.Modal(document.getElementById('logsModal')).show();
    });

    document.getElementById('copy-btn').addEventListener('click', () =>
const outputArea = document.getElementById('output-area');
        outputArea.select();
        document.execCommand('copy');
        alert('JIRA IDs copied to clipboard!');
    });

    document.getElementById('export-btn').addEventListener('click', () => {
        const blob = new Blob([Array.from(jiraIDs).join('\n')], { type: 'text/plain' });
        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = 'jira_ids.txt';
        link.click();
    });

    function updateLogs(lineNumber, lineContent, isException = false) {
        let logMessage = `Processing line ${lineNumber}: ${lineContent}`;
        if (isException) {
            logMessage += ' <span style="color:red;">(Exception)</span>';
        }
        logs.push(logMessage);
    }

    function validateProjectKey(match) {
        return projectKeys.some(key => match.toUpperCase().includes(key.replace('-', '')));
    }

    function processKeyword(keyword, lineNumber) {
        if (!validateProjectKey(keyword)) {
            exceptions.push(`Line ${lineNumber}: ${keyword} (Exception)`);
            updateLogs(lineNumber, keyword, true);
        } else {
            updateLogs(lineNumber, keyword);
        }
    }

    checkJiraLogin(); // Ensure Jira login status is checked at page load
</script>
</body>
</html>