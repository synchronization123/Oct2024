<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JIRA Changelog Parser</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
    <style>
        .modal-body {
            white-space: pre-wrap; /* Preserve whitespace */
            max-height: 300px; /* Set maximum height */
            overflow-y: auto; /* Enable vertical scroll */
        }
        #statusMessage {
            position: absolute;
            top: 10px;
            right: 20px;
            z-index: 1000;
        }
        .blink {
            animation: blink-animation 1s steps(5, start) infinite;
        }
        @keyframes blink-animation {
            to {
                visibility: hidden;
            }
        }
        .exception {
            color: red; /* Red color for exceptions */
        }
        .modal-header {
            background-color: #007bff;
            color: white;
        }
        .modal-footer {
            background-color: #f1f1f1;
        }
        .modal-content {
            border-radius: 10px;
        }
        .alert {
            margin-bottom: 20px;
        }
        .container {
            max-width: 800px;
            margin-top: 30px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1>JIRA Changelog Parser</h1>
        <div id="statusMessage"></div> <!-- Status message div -->
        <div id="errorMessage" class="alert alert-danger" style="display: none;"></div> <!-- Error message div -->
        <input type="file" id="changelogInput" accept=".txt" class="form-control mb-2">
        <button class="btn btn-primary" onclick="processChangelog()">Start Processing</button>
        
        <div id="resultsContainer" style="display: none;">
            <button class="btn btn-success" id="exportButton" disabled onclick="exportToExcel()">Export to Excel</button>
            <button class="btn btn-info" onclick="showProjectsModal()">Show Projects</button>
            <button id="exceptionsButton" class="btn btn-warning" onclick="showExceptionsModal()">Show Exceptions</button>
            <button class="btn btn-secondary" onclick="showLogsModal()">Show Logs</button>
            <h5>Total JIRA IDs found: <span id="totalCount">0</span></h5>
        </div>
        
        <textarea id="outputArea" class="form-control" rows="10" readonly></textarea>
        <div id="copyMessage" class="alert alert-success mt-2" style="display: none;">Copied to clipboard!</div>
    </div>

    <!-- Modal for Projects -->
    <div class="modal fade" id="projectsModal" tabindex="-1" role="dialog" aria-labelledby="projectsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="projectsModalLabel">Projects</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="projectsContent"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Exceptions -->
    <div class="modal fade" id="exceptionsModal" tabindex="-1" role="dialog" aria-labelledby="exceptionsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exceptionsModalLabel">Exceptions</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="exceptionsContent"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Logs -->
    <div class="modal fade" id="logsModal" tabindex="-1" role="dialog" aria-labelledby="logsModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logsModalLabel">Logs</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="logsContent"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let projectKeys = [];
        let jiraIDs = new Set();
        let exceptions = [];
        let logs = [];

        // Fetch project keys from data.txt file
        async function fetchProjects() {
            try {
                const response = await fetch('data.txt');
                if (!response.ok) throw new Error('Error connecting to data.txt');
                const data = await response.text();
                projectKeys = data.split('\n').map(key => key.trim()).filter(Boolean); // Store project keys
                displayStatusMessage('Project keys loaded successfully', 'success');
            } catch (error) {
                displayStatusMessage('Error loading project keys', 'danger');
            }
        }

        // Display status message
        function displayStatusMessage(message, type) {
            const statusMessageDiv = document.getElementById('statusMessage');
            statusMessageDiv.innerHTML = `<div class="alert alert-${type}" role="alert">${message}</div>`;
            setTimeout(() => {
                statusMessageDiv.innerHTML = '';
            }, 5000);
        }

        // Process the changelog file
        async function processChangelog() {
            const changelogInput = document.getElementById('changelogInput').files[0];
            if (!changelogInput || changelogInput.type !== 'text/plain') {
                displayErrorMessage('Please upload a valid .txt file.');
                return;
            }

            const text = await changelogInput.text();
            const lines = text.split('\n');
            const regex = new RegExp(`\\b(${projectKeys.join('|')})-(\\d+)\\b`, 'i');

            exceptions = []; // Reset exceptions
            jiraIDs.clear(); // Clear previous results
            logs = []; // Reset logs
            let lineNumber = 0;

            lines.forEach(line => {
                lineNumber++;
                const originalLine = line.trim();
                let lineLog = `Processing line ${lineNumber}: ${originalLine}`;

                const words = originalLine.split(/[\s,]+/);
                let foundException = false; // Flag for exception found in this line
                let alreadyLoggedExceptions = new Set(); // Track logged exceptions for this line

                words.forEach(word => {
                    const match = regex.exec(word);
                    if (match) {
                        jiraIDs.add(match[0]); // Add matched JIRA ID
                    } else {
                        // Check for keywords that match project keys ignoring the hyphen
                        projectKeys.forEach(key => {
                            const upperKey = key.trim().toUpperCase();
                            const upperWord = word.trim().toUpperCase();
                            // Check for invalid formats
                            if (upperWord.startsWith(upperKey) && upperWord.length > upperKey.length) {
                                const exceptionMessage = `Line ${lineNumber}: ${word} (matches project key but not a valid JIRA ID)`;
                                if (!alreadyLoggedExceptions.has(exceptionMessage)) {
                                    exceptions.push(exceptionMessage);
                                    alreadyLoggedExceptions.add(exceptionMessage);
                                    foundException = true; // Mark exception found
                                }
                            }
                        });
                    }
                });

                // Log the line with exception if found
                if (foundException) {
                    lineLog += ' <span class="exception">(Exception)</span>';
                }

                logs.push(lineLog);
            });

            // Update output area
            const output = Array.from(jiraIDs).join(', ');
            document.getElementById('outputArea').value = output || 'No JIRA IDs found'; // Display message if no IDs found
            document.getElementById('totalCount').innerText = jiraIDs.size;

            // Show results container and enable buttons
            document.getElementById('resultsContainer').style.display = 'block';
            document.getElementById('exportButton').disabled = jiraIDs.size === 0;
            
document.getElementById('exceptionsButton').disabled = exceptions.length === 0;
            displayLogs();
        }

        // Display error messages
        function displayErrorMessage(message) {
            const errorMessageDiv = document.getElementById('errorMessage');
            errorMessageDiv.innerHTML = message;
            errorMessageDiv.style.display = 'block';
            setTimeout(() => {
                errorMessageDiv.style.display = 'none';
            }, 5000);
        }

        // Show projects modal
        function showProjectsModal() {
            const projectsContent = projectKeys.join(', ');
            document.getElementById('projectsContent').innerText = projectsContent || 'No projects found.';
            $('#projectsModal').modal('show');
        }

        // Show exceptions modal
        function showExceptionsModal() {
            const exceptionsContent = exceptions.length > 0 ? exceptions.join('\n') : 'No exceptions found.';
            document.getElementById('exceptionsContent').innerText = exceptionsContent;
            $('#exceptionsModal').modal('show');
        }

        // Show logs modal
        function showLogsModal() {
            const logsContent = logs.join('\n');
            document.getElementById('logsContent').innerText = logsContent || 'No logs to display.';
            $('#logsModal').modal('show');
        }

        // Export to Excel
        function exportToExcel() {
            const outputText = document.getElementById('outputArea').value;
            const workbook = XLSX.utils.book_new();
            const worksheet = XLSX.utils.aoa_to_sheet([['JIRA IDs'], ...outputText.split(', ').map(id => [id])]);
            const inputFileName = document.getElementById('changelogInput').files[0].name.split('.')[0]; // Get the input file name without extension
            XLSX.utils.book_append_sheet(workbook, worksheet, 'JIRA IDs');
            XLSX.writeFile(workbook, `${inputFileName}.xlsx`); // Use the same name as input with .xlsx extension
        }

        // Fetch projects when the page loads
        window.onload = fetchProjects;
    </script>
    
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.0.7/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>