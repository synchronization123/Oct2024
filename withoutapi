To modify your script to fetch project keys from a data.txt file located at a specific path (e.g., http://localhost/oct2024/projects.txt) instead of the JIRA API, you can make a few adjustments to the fetchProjects function. Here's how you can do it:

Changes:

1. Replace the fetchProjects function to fetch the contents of the projects.txt file.


2. Parse the file and extract the project keys.


3. Make sure the projects.txt contains project keys in a format like:

PROJECT1
PROJECT2
PROJECT3



Here's how to modify your existing script:

Updated Code:

<script>
    let projectKeys = [];
    let jiraIDs = new Set();
    let exceptions = [];
    let logs = [];

    // Fetch project keys from the data.txt file
    async function fetchProjects() {
        try {
            const response = await fetch('http://localhost/oct2024/projects.txt'); // Hardcoded path to data.txt
            if (!response.ok) throw new Error('Error fetching projects');
            const text = await response.text();
            projectKeys = text.split('\n').map(key => key.trim() + '-').filter(Boolean); // Store project keys with hyphen
            displayStatusMessage('Fetched project keys from data.txt', 'success');
        } catch (error) {
            displayStatusMessage('Error fetching project keys', 'danger');
        }
    }

    // Display status message
    function displayStatusMessage(message, type) {
        const statusMessageDiv = document.getElementById('statusMessage');
        statusMessageDiv.innerHTML = `<div class="alert alert-${type}" role="alert">${message}</div>`;
        setTimeout(() => {
            statusMessageDiv.innerHTML = '';
        }, 5000);
    }

    // Process the changelog file
    async function processChangelog() {
        const changelogInput = document.getElementById('changelogInput').files[0];
        if (!changelogInput || changelogInput.type !== 'text/plain') {
            displayErrorMessage('Please upload a valid .txt file.');
            return;
        }

        const text = await changelogInput.text();
        const lines = text.split('\n');
        const regex = new RegExp(`\\b(${projectKeys.join('|').replace(/-/g, '\\-')})(\\d+)\\b`, 'i');

        exceptions = []; // Reset exceptions
        jiraIDs.clear(); // Clear previous results
        logs = []; // Reset logs
        let lineNumber = 0;

        lines.forEach(line => {
            lineNumber++;
            const originalLine = line.trim();
            let lineLog = `Processing line ${lineNumber}: ${originalLine}`;

            const words = originalLine.split(/[\s,]+/);
            let foundException = false; // Flag for exception found in this line
            let alreadyLoggedExceptions = new Set(); // Track logged exceptions for this line

            words.forEach(word => {
                const match = regex.exec(word);
                if (match) {
                    jiraIDs.add(match[0]); // Add matched JIRA ID
                } else {
                    // Check for keywords that match project keys ignoring the hyphen
                    projectKeys.forEach(key => {
                        const upperKey = key.trim().toUpperCase();
                        const upperWord = word.trim().toUpperCase();
                        if (upperWord.startsWith(upperKey) && upperWord.length > upperKey.length) {
                            const exceptionMessage = `Line ${lineNumber}: ${word} (matches project key but not a valid JIRA ID)`;
                            if (!alreadyLoggedExceptions.has(exceptionMessage)) {
                                exceptions.push(exceptionMessage);
                                alreadyLoggedExceptions.add(exceptionMessage);
                                foundException = true; // Mark exception found
                            }
                        }
                        // Check for matches without requiring a hyphen
                        if (upperWord.includes(upperKey.replace('-', ''))) {
                            const exceptionMessage = `Line ${lineNumber}: ${word} (matches project key without hyphen)`;
                            if (!alreadyLoggedExceptions.has(exceptionMessage)) {
                                exceptions.push(exceptionMessage);
                                alreadyLoggedExceptions.add(exceptionMessage);
                                foundException = true; // Mark exception found
                            }
                        }
                    });
                }
            });

            // Log the line with exception if found
            if (foundException) {
                lineLog += ' <span class="exception">(Exception)</span>';
            }

            logs.push(lineLog);
        });

        // Update output area
        const output = Array.from(jiraIDs).join(', ');
        document.getElementById('outputArea').value = output || 'No JIRA IDs found'; // Display message if no IDs found
        document.getElementById('totalCount').innerText = jiraIDs.size;

        // Show results container and enable buttons
        document.getElementById('resultsContainer').style.display = 'block';
        document.getElementById('exportButton').disabled = jiraIDs.size === 0;
        document.getElementById('exceptionsButton').disabled = exceptions.length === 0;
        document.getElementById('logsButton').disabled = logs.length === 0;
        displayLogs();
        toggleBlinkingExceptionsButton(); // Start blinking if there are exceptions
    }

    // Fetch projects on load
    window.onload = fetchProjects;
</script>

Explanation of Changes:

1. Fetching projects.txt: The fetchProjects function now fetches from the hardcoded URL http://localhost/oct2024/projects.txt.


2. Processing Project Keys: After fetching, it splits the content by newline (\n) to get individual project keys, trims any extra spaces, and appends a hyphen (-) to each key for consistency.


3. Error Handling: The function shows success or error messages based on whether the file is successfully fetched or not.



You can now store your project keys in projects.txt, and the script will fetch them from there instead of the JIRA API.

