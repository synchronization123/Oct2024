<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JIRA Changelog Extractor</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <style>
        .red-highlight { color: red; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2 class="text-center">JIRA Changelog Extractor</h2>

        <!-- File Upload and Start Button -->
        <div class="form-group">
            <label for="changelogFile">Upload Changelog File (.txt):</label>
            <input type="file" class="form-control-file" id="changelogFile" accept=".txt">
        </div>
        <button id="startButton" class="btn btn-primary">Start</button>
        
        <!-- Output Area -->
        <div class="form-group mt-3">
            <label for="output">Matched JIRA IDs:</label>
            <textarea id="output" class="form-control" rows="4" readonly></textarea>
        </div>
        <button id="exportButton" class="btn btn-success">Export to Excel</button>

        <!-- Exceptions Tabs -->
        <ul class="nav nav-tabs mt-4">
            <li class="nav-item">
                <a class="nav-link active" data-toggle="tab" href="#matchingStringsTab">Matching Strings</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#lineByLineTab">Line by Line Parsing</a>
            </li>
        </ul>

        <!-- Exceptions Tab Content -->
        <div class="tab-content">
            <div id="matchingStringsTab" class="tab-pane fade show active">
                <div id="exceptions" class="mt-3"></div>
            </div>
            <div id="lineByLineTab" class="tab-pane fade">
                <div id="lineByLineExceptions" class="mt-3"></div>
            </div>
        </div>
    </div>

    <script>
        document.getElementById("startButton").addEventListener("click", async function () {
            let projectKeys = [];
            try {
                const response = await fetch("https://44.23.33.44/projects/fetch.php");
                if (response.ok) {
                    const textData = await response.text();
                    projectKeys = textData.trim().split("\n").map(line => line.trim());
                } else {
                    alert("Failed to load project keys from the server.");
                    return;
                }
            } catch (error) {
                console.error("Error fetching project keys:", error);
                alert("Error fetching project keys. Please check the URL or network connection.");
                return;
            }

            const fileInput = document.getElementById("changelogFile");
            const output = document.getElementById("output");
            const exceptionsDiv = document.getElementById("exceptions");
            const lineByLineDiv = document.getElementById("lineByLineExceptions");

            if (!fileInput.files.length) {
                alert("Please upload a changelog file.");
                return;
            }

            const file = fileInput.files[0];
            const reader = new FileReader();
            reader.onload = function (e) {
                const lines = e.target.result.split(/\r?\n/);
                const matchedJiraIDs = new Set();
                const exceptions = [];
                const lineByLineExceptions = [];

                lines.forEach((line, index) => {
                    let foundMatch = false;
                    projectKeys.forEach(key => {
                        const jiraPattern = new RegExp(`\\b(${key}-\\d+)\\b`, "gi");
                        const substringPattern = new RegExp(`(${key})`, "gi");

                        let jiraMatch;
                        while ((jiraMatch = jiraPattern.exec(line)) !== null) {
                            matchedJiraIDs.add(jiraMatch[1]);
                            foundMatch = true;
                        }

                        if (!foundMatch && substringPattern.test(line)) {
                            const highlightedLine = line.replace(substringPattern, match => `<span class="red-highlight">${match}</span>`);
                            exceptions.push(`Line ${index + 1}: ${highlightedLine}`);
                            lineByLineExceptions.push(`Line ${index + 1}: ${line}`);
                        }
                    });
                });

                output.value = Array.from(matchedJiraIDs).join(", ");
                exceptionsDiv.innerHTML = `<ul>${exceptions.map(item => `<li>${item}</li>`).join('')}</ul>`;
                lineByLineDiv.innerHTML = `<ul>${lineByLineExceptions.map(item => `<li>${item}</li>`).join('')}</ul>`;
            };
            reader.readAsText(file);
        });

        document.getElementById("exportButton").addEventListener("click", function () {
            const output = document.getElementById("output").value;
            const jiraIDs = output.split(", ").filter(id => id);

            if (jiraIDs.length === 0) {
                alert("No JIRA IDs to export.");
                return;
            }

            const worksheet = XLSX.utils.aoa_to_sheet([["Jira ID"], ...jiraIDs.map(id => [id])]);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "JIRA IDs");

            const filename = document.getElementById("changelogFile").files[0].name.replace(".txt", "") + "_JIRA_IDs.xlsx";
            XLSX.writeFile(workbook, filename);
        });
    </script>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>